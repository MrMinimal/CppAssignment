Implementierung einer Studentendatenbank

Damit die Anwendung von Anfang erweiterbar ist, wurde von Anfang an Objektorientierung verfolgt. Spezieller sind die Hauptkomponenten nach dem Model View Controller Prinzip konzipiert.
Das Model haelt alle wichtigen Daten und stellt Funktionalitaet fuer die Manipulierung dieser zur Verfuegung.
Die View haelt keine Informationen und stellt ausschliesslich Funktionalitaet fuer das Anzeigen von Strings und Listen zur Verfuegung. Zudem koennen Usereingaben blockierend
eingelesen werden, und an den Controller zurueckgegeben werden.
Der Controller haelt alle Logik und entscheidet wann und welche  Daten des Models manipuliert werden.
Dabei implementieren die einzelnen Komponenten davon Interfaces, damit Erweiterbarkeit ermoeglicht wird.

Wenn es z.B. darum geht ein neues User Interface zu entwickeln, welches nicht in der Konsole ausgibt, muesste diese neue Klasse lediglich das IView Interface implementieren 
um Funktionalitaet fuer den Controller bereit zu stellen.
Zudem sind alle Entitaeten wie Studenten, Kurse etc. die in der Datenbank gespeichert werden sollen als eigene Objekte angelegt. Dies dient der Uebersichtlichkeit und erleichtert
die Lesbarkeit des Codes.
Damit der Code des User Interfaces uebersichtlich bleibt, sind die Zustaende dessen in einem Enum festgelegt.
Das User Interface hat eine Hauptschleife welche laeuft, bis das Programm terminiert wird.
Es wurde zudem darauf geachtet, dass der Code moeglichst wenig Kommentare benoetigt. Somit sind alle Funktionen kurz gehalten und der Code in seine atomaren Teile aufgeteilt.
Keine Methode (ausgenommen sind switch-case Konstrukte, deren Logik-Bloecke sind auch aehnlich kurz) ist laenger als 20 Zeilen.
Die einzige Aufgabe der main-Funktion ist, das Model-View-Controller Modell zu erstellen und die benoetigten Referenzen zwischen den Komponten einzurichten. 

Der Arbeitsaufwand des Projekts betrug 15 Stunden.

Das Projekt wurde plattformunabhaengig programmiert mit Hilfe von CMake. Das Projekt compilt dadurch unter Visual Studio 13,15, Eclipse, QT Creator und GCC.
Zudem wurde das Projekt mit Git verwaltet und auf GitHub gehostet. Dies ist geschehen, dass paralelles Arbeiten fuer alle Teammitglieder moeglich ist.

Es kam zu keinen Komplikationen waehrend der Entwicklung, da C++ die Sprache ist, welche ich auch im Betrieb verwende.
Ausschliesslich der Workflow mit git war neu, wobei keine grossen Unterschiede zu SVN den Fortschritt des Projets aufgehalten haben.
Das Zusammenfuehren von Branches war gut umzusetzen, auch bei merge Konflikten.
